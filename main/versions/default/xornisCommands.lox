// xorniscommands.lox | made by terlexory

// || @ yielding until table has been created
while (!_G.xornis) {
	wait();
}

// || @ xornis var
var xornis = _G.xornis;

// || @ creating table element
xornis.commands = {}

// || @ yielding until table elements have been created
while (!xornis.globals) {
	wait();
}

while (!xornis.configuration) {
	wait();
}

while (!xornis.customCommands) {
	wait();
}

// || @ vars
var globals = xornis.globals;
var commands = xornis.commands;
var configuration = xornis.configuration;
var customCommands = xornis.customCommands;

// DOCUMENTED
//commands.examplecommand = { // commands.commandnamehere = { (DO NOT MAKE ANY LETTER CAPTALIZED!!!)
	//prefix = configuration.Prefix, // prefix which the command uses
	//args = {}, // arguments which the command uses
	//description = 'an example command it literally does nothing except gives u a notification', // the description of the command
	//adminLevel = 0, // levels are: 0/nil - players+, 1 - helper+, 2 - mod+, 3 - admin+, 4 - coowner+, 5 - owner. rank names are: 'Players', 'Helper', 'Mod', 'Admin', 'Coowner', 'Owner'
	//argumentsOptional = true, // if true then it wont block the command from running when there are insufficent arguments given
			
	//callback = function(player, args) { // gets called when someone runs the command
		// example code	
		
		//Announce('hi guys i play minecraft and stuff, my favourite show is better call saul', player);		
	//}
//}

// UNDOCUMENTED
//commands.examplecommand = {
	//prefix = configuration.Prefix,
	//args = {},
	//description = 'an example command it literally does nothing except gives u a notification',
	//adminLevel = 0,
	//argumentsOptional = true,
			
	//callback = function(player, args) {
		//Announce('hi guys i play minecraft and stuff, my favourite show is better call saul', player);		
	//}
//}

// || @ commands (i am too lazy to comment all of these so you figure them out lmao)
commands.quit = {
	prefix = configuration.Prefix,
	args = {},
	description = 'Quits to menu',
	adminLevel = 0,
	argumentsOptional = true,
			
	callback = function(player, args) {
		Kick(player, 'Ran command: quit');
	}
}

commands.invite = {
	prefix = configuration.Prefix,
	args = {},
	description = 'Sends the GG invite (13+)',
	adminLevel = 0,
	argumentsOptional = true,
			
	callback = function(player, args) {
		if (configuration.inviteCode == '[CODE HERE]' or configuration.inviteCode == nil or configuration.inviteCode == '') {
			AnnounceRestricted('Not set up or disabled.', player);	
			return;
		}		
		AnnounceRestricted(configuration.inviteCode, player);
	}
}

commands.kick = {
	prefix = configuration.Prefix,
	args = {'player', 'reason'},
	description = `Kicks player(s)`,
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			Kick(plr, args[2]);
		}
	}
}

commands.god = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Gods player(s)`,
	adminLevel = 2,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetGodmode(plr, true);
		}
	}
}

commands.ungod = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Ungods player(s)`,
	adminLevel = 2,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetGodmode(plr, false);
		}
	}
}

commands.noclip = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Noclips player(s)`,
	adminLevel = 2,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetNoclip(plr, true);
		}
	}
}

commands.clip = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Un-noclips player(s)`,
	adminLevel = 2,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetNoclip(plr, false);
		}
	}
}

commands.maxhealth = {
	prefix = configuration.Prefix,
	args = {'player', 'hp'},
	description = `Sets player(s) max health`,
	adminLevel = 2,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetMaxHealth(plr, args[2]);
		}
	}
}

commands.health = {
	prefix = configuration.Prefix,
	args = {'player', 'hp'},
	description = `Sets player(s) health`,
	adminLevel = 2,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetHealth(plr, args[2]);
		}
	}
}

commands.heal = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Heal player(s)`,
	adminLevel = 2,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetHealth(plr, plr.MaxHealth);
		}
	}
}

commands.damage = {
	prefix = configuration.Prefix,
	args = {'player', 'hp'},
	description = `Damage player(s)`,
	adminLevel = 2,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			TakeDamage(plr, args[2], 'get dunked on');
		}
	}
}

commands.armor = {
	prefix = configuration.Prefix,
	args = {'player', 'armor', 'max'},
	description = `Set player(s) armor`,
	adminLevel = 2,
	argumentsOptional = true,
			
	callback = function(player, args) {
		if (!args[2]) {
			Announce('2nd argument is required', player);		
			return;
		}
		
		if (!args[3]) {
			args[3] = args[2];
		}

		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetArmor(plr, args[2], args[3]);
		}
	}
}

commands.immunity = {
	prefix = configuration.Prefix,
	args = {'player', 'immunity'},
	description = `Set player(s) immunity`,
	adminLevel = 2,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetImmunity(plr, args[2]);
		}
	}
}

commands.speed = {
	prefix = configuration.Prefix,
	args = {'player', 'speed'},
	description = `Set player(s) speed`,
	adminLevel = 2,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetSpeed(plr, args[2]);
		}
	}
}

commands.jumpforce = {
	prefix = configuration.Prefix,
	args = {'player', 'jumpforce'},
	description = `Set player(s) jump force`,
	adminLevel = 2,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetJump(plr, args[2]);
		}
	}
}

commands.infection = {
	prefix = configuration.Prefix,
	args = {'player', 'infection'},
	description = `Set player(s) infection`,
	adminLevel = 2,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetInfection(plr, args[2]);
		}
	}
}

commands.kill = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Kills player(s)`,
	adminLevel = 2,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			Kill(plr, 'get dunked on');		
		}
	}
}

commands.explode = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = 'We do a little bit of trolling',
	adminLevel = 2,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			Explode(plr.Position, 100000000, 1, nil, 'get dunked on');
		}
	}
}

commands.refresh = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Refresh player(s)`,
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			ConvertToClass(plr, plr.Class, true, true);
		}
	}
}

commands.re = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Refresh player(s)`,
	adminLevel = 1,
	argumentsOptional = true,
	alias = true,	
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			ConvertToClass(plr, plr.Class, true, true);
		}
	}
}

commands.respawn = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Respawn player(s)`,
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetClass(plr, plr.Class);
		}
	}
}

commands.res = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Respawn player(s)`,
	adminLevel = 1,
	argumentsOptional = true,
	alias = true,	
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetClass(plr, plr.Class);
		}
	}
}

commands.overwatch = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Set player(s) to overwatch`,
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetOverwatch(plr, true);
		}
	}
}

commands.unoverwatch = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Un-set player(s) to overwatch`,
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetOverwatch(plr, false);
		}
	}
}

commands.bypass = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Give player(s) bypass`,
	adminLevel = 2,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetBypass(plr, true);
		}
	}
}

commands.unbypass = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Remove player(s) bypass`,
	adminLevel = 2,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetBypass(plr, false);
		}
	}
}

commands.mute = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Mute player(s)`,
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetMuted(plr, true);
		}
	}
}

commands.unmute = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Unmute player(s)`,
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetMuted(plr, false);
		}
	}
}

commands.invisible = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Sets player(s) invisible`,
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetPlayerTransparency(plr, 1);
		}
	}
}

commands.invis = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Sets player(s) invisible`,
	adminLevel = 1,
	argumentsOptional = true,
	alias = true,	
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetPlayerTransparency(plr, 1);
		}
	}
}

commands.visible = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Sets player(s) visible`,
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetPlayerTransparency(plr, 0);
		}
	}
}

commands.vis = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Sets player(s) visible`,
	adminLevel = 1,
	argumentsOptional = true,
	alias = true,	
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetPlayerTransparency(plr, 0);
		}
	}
}

commands.teleport = {
	prefix = configuration.Prefix,
	args = {'player1', 'player2'},
	description = `Teleport player(s) to other player(s)`,
	adminLevel = 1,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players1 = globals.getPlayers(player, args[1]);
		for _,plr1 in players1 {
			var players2 = globals.getPlayers(player, args[2]);		
			for _,plr2 in players2 {
				Teleport(plr1, plr2.Position);
			}
		}
	}
}

commands.goto = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Goto a player`,
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			Teleport(player, plr.Position);
			break;	
		}
	}
}

commands.bring = {
	prefix = configuration.Prefix,
	args = {'player'},
	description = `Bring player(s)`,
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			Teleport(plr, player.Position);		
		}
	}
}

commands.shirt = {
	prefix = configuration.Prefix,
	args = {'player', 'id'},
	description = `Set player(s) shirt`,
	adminLevel = 2,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetShirt(plr, args[2]);		
		}
	}
}

commands.pants = {
	prefix = configuration.Prefix,
	args = {'player', 'id'},
	description = `Set player(s) pants`,
	adminLevel = 2,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetPants(plr, args[2]);		
		}
	}
}

commands.csay = {
	prefix = configuration.Prefix,
	args = {'player', 'message'},
	description = 'Sends a chat message to player(s)',
	adminLevel = 2,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SendChatMessage(args[2], plr);
		}
	}
}

commands.asay = {
	prefix = configuration.Prefix,
	args = {'player', 'message'},
	description = 'Sends an announcement to player(s)',
	adminLevel = 1,
	argumentsOptional = true,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			Announce(args[2], plr);
		}
	}
}

commands.giveitem = {
	prefix = configuration.Prefix,
	args = {'player', 'item'},
	description = 'Give player(s) item(s)',
	adminLevel = 2,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			var items = strsplit(args[2], ',');
			
			for _,item in items {
				GiveItem(plr,item);
			}
		}
	}
}

commands.removeitem = {
	prefix = configuration.Prefix,
	args = {'player', 'item'},
	description = 'Remove player(s) item(s)',
	adminLevel = 2,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			var items = strsplit(args[2], ',');
			
			for _,item in items {
				if (HasItem(plr,item)) {
					RemoveItem(plr,item);
				}	
			}
		}
	}
}

commands.forceclass = {
	prefix = configuration.Prefix,
	args = {'player', 'class'},
	description = 'Forceclass player(s)',
	adminLevel = 1,
	argumentsOptional = false,
			
	callback = function(player, args) {
		var players = globals.getPlayers(player, args[1]);
		for _,plr in players {
			SetClass(plr, args[2]);		
		}
	}
}

commands.help = {
	prefix = configuration.Prefix,
	args = {'command'},
	description = 'Shows a list of commands',
	adminLevel = 0,
	argumentsOptional = true,
			
	callback = function(player, args) {
		if (args[1]) {
			var cmdTable = commands[args[1]];
			
			Announce(`{cmdTable.prefix}{args[1]} - {cmdTable.description}`, player);
			
			wait(0.5);
						
			var message = `Usage: {cmdTable.prefix}{args[1]}`
		
			for (var i = 1; i <= #cmdTable.args; i = i + 1) {
				message = message + ` [{cmdTable.args[i]}]`
			}	
			
			Announce(message, player);		
			return;
		}	
	
		Announce(`Listing default commands...`, player);
		
		wait(0.5);			
			
		for cmdName,cmdTable in commands {
			if (cmdName == '__loaded') { continue }
			if (cmdTable['alias']) { continue }			
				
			Announce(`{cmdTable.prefix}{cmdName} - {cmdTable.description}`, player);
			
			wait(0.5);
						
			var message = `Usage: {cmdTable.prefix}{cmdName}`
		
			for (var i = 1; i <= #cmdTable.args; i = i + 1) {
				message = message + ` [{cmdTable.args[i]}]`
			}	
			
			Announce(message, player);
						
			wait(1.5);
		}
		
		Announce(`Listing custom commands...`, player);
		
		wait(0.5);
		
		for cmdName,cmdTable in customCommands {
			if (cmdName == '__loaded') { continue }
			if (cmdTable['alias']) { continue }			
				
			Announce(`{cmdTable.prefix}{cmdName} - {cmdTable.description}`, player);
			
			wait(0.5);
						
			var message = `Usage: {cmdTable.prefix}{cmdName}`
		
			for (var i = 1; i <= #cmdTable.args; i = i + 1) {
				message = message + ` [{cmdTable.args[i]}]`
			}	
			
			Announce(message, player);
						
			wait(1.5);			
		}

		Announce(`Finished listing`, player);
	}
}

commands.__loaded = true;

if (configuration.verbose) {
	print 'XornisCommands loaded!';
}
